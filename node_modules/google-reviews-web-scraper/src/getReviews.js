const puppeteer = require('puppeteer');

const getReviews = async (url, output = "json") => {
    output = output.toLowerCase();
    if (output != "json" && output != "object") {
        console.error('INVALID OUTPUT OPTION');
        return;
    }
    console.log('Launching headless chrome...');
    url = url.toString();
    const browser = await puppeteer.launch({ args: ['--disabled-setuid-sandbox', '--no-sandbox'] });
    const page = await browser.newPage();
    console.log('going to url');
    await page.goto(url);
    await page.click("button"); // click on accept button from consent cookies
    console.log(page.url);
    console.log('waiting for selector');

    await page.waitForSelector('.gm2-body-2');
    console.log('it\'s here ! now loop through data...')
    const data = await page.evaluate(() => {
        let reviewAuthorNamesClasses = document.getElementsByClassName('ODSEW-ShBeI-title');
        let reviewAuthorNames = [];
        for (let elements of reviewAuthorNamesClasses) {
            reviewAuthorNames.push(elements.innerText);
        }
        let datesClasses = document.getElementsByClassName('ODSEW-ShBeI-RgZmSc-date');
        let dates = [];
        for (let elements of datesClasses) {
            dates.push(elements.innerText);
        }

        let ratingsClasses = document.getElementsByClassName('ODSEW-ShBeI-H1e3jb');
        let ratings = [];

        for (let elements of ratingsClasses) {
            let ratingStars = 0;
            for (const star of elements.children) {
                if (star.className.indexOf("ODSEW-ShBeI-fI6EEc-active") !== -1) {
                    ratingStars++;
                }

            }
            ratings.push(ratingStars);
        }

        let reviewsContentClasses = document.getElementsByClassName('ODSEW-ShBeI-text');
        let reviewsContent = []
        for (let elements of reviewsContentClasses) {
            if (elements.nodeName !== "DIV") {
                reviewsContent.push(elements.innerText);
            }
        }

        let reviews = [];
        for (let i = 0; i < 3; i++) {
            reviews.push({
                autor: reviewAuthorNames[i],
                fechaPublicacion: dates[i],
                valoracion: ratings[i],
                textoReview: reviewsContent[i]
            });
        }

        return reviews;
    })

    console.log('done ! closing browser...')
    browser.close();
    console.log(data);
    return new Promise((resolve, reject) => {
        resolve(data);
        if (reject) {
            reject({ error: "error while scraping data." })
        }
    })
};

module.exports = getReviews;